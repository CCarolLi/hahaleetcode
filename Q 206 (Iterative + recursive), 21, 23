5.21.2020 // Q 206 (Iterative + recursive), 21, 23

206. Reverse Linked List
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        # recursive
        if not head:
            return head
        # cur = head
        return self.helper(None, head)
    
    def helper(self, prev, cur):
        if not cur:
            return prev
        else:
            temp = cur.next
            cur.next = prev
            # prev = cur
            # cur = temp
            return self.helper(cur, temp)
            
            
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        # iterative
        if not head:
            return head
        prev, cur = None, head
        while cur:
            temp = cur.next
            cur.next = prev
            prev = cur
            cur = temp
        return prev
       
       
21. Merge Two Sorted Lists
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        if not l1:
            return l2
        if not l2:
            return l1
        dummy = ListNode()
        cur = dummy
        while l1 and l2:
            if l1.val < l2.val:
                cur.next = ListNode(l1.val)
                l1 = l1.next
                cur = cur.next
            else:
                cur.next = ListNode(l2.val)
                l2 = l2.next
                cur = cur.next
        while l1:
            cur.next = ListNode(l1.val)
            cur = cur.next
            l1 = l1.next
        while l2:
            cur.next = ListNode(l2.val)
            cur = cur.next
            l2 = l2.next
        return dummy.next
        
        
23. Merge k Sorted Lists
