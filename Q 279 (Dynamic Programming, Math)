5.26.2020 // Q 279 (Dynamic Programming, Math)
- if we want to optimize backtracking, we use memoization and then dp


279. Perfect Squares
class Solution(object):
    def numSquares(self, n):
        """
        :type n: int
        :rtype: int
        """
        # dynamic programming
        # if we want to optimize backtracking, we use memoization and then dp
        # we calculate the perfect square sum for all 1 - n
        if n <= 0:
            return 0
        
        dp = [0] * (n + 1)
        for i in range(1, n + 1):  # 0 is not perfect square
            local_res = float('inf')
            j = 1
            while i - j * j >= 0:
                local_res = min(local_res, dp[i - j * j] + 1)
                j += 1
            dp[i] = local_res
            
        return dp[-1]
