5.29.2020 // Q 221 (Dynamic Programming)


Solution 1: 
class Solution(object):
    def maximalSquare(self, matrix):
        """
        :type matrix: List[List[str]]
        :rtype: int
        """
        if not matrix or len(matrix) == 0:
            return 0
        dp = [[int(matrix[i][j]) for j in range(len(matrix[0]))] for i in range(len(matrix))]
        res = max(max(dp))
        
        for i in range(1, len(dp)):
            for j in range(1, len(dp[0])):
                if dp[i][j] == 0:
                    continue
                if i == 0:
                    dp[i][j] = dp[i][j - 1] + 1
                elif j == 0:
                    dp[i][j] =  dp[i - 1][j] + 1
                else:
                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1
                print(dp[i][j] * dp[i][j])
                res = max(res, dp[i][j] * dp[i][j])
        print(dp)
        return res


Solution 2: simplified
class Solution(object):
    def maximalSquare(self, matrix):
        """
        :type matrix: List[List[str]]
        :rtype: int
        """
        if not matrix or len(matrix) == 0:
            return 0
        dp = [[int(matrix[i][j]) for j in range(len(matrix[0]))] for i in range(len(matrix))]
        # dp[i][j] represents 
        # the length of the square which lower right corner is located at (i, j).

        res = max(max(dp))  # prevent the situation that only single 1 exists in the matrix 
        
        for i in range(1, len(dp)):
            for j in range(1, len(dp[0])):
                # if dp[i][j] == 1:
                #     dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1
                dp[i][j] = (min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1) * int(matrix[i][j])
                # matrix[i] == 0 then dp[i][j] will remain 0, 
                # else will change to the value we want
                res = max(res, dp[i][j] * dp[i][j])
        return res
