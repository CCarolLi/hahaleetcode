5.29.2020 // Q 337 (DFS, Tree)
- The Time complexity of BFS is O(V + E), where V stands for vertices and E stands for edges. 
- The Time complexity of DFS is also O(V + E), where V stands for vertices and E stands for edges.

337. House Robber III
- O(n) T, O(n) S
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def rob(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        # DFS 
        # problem about tree - use recursion
        res = self.dfs(root)
        return max(res[0], res[1])
        
    def dfs(self, root):
        # 0 - not rob, 1 - rob
        if root == None:
            return [0, 0]
        left = self.dfs(root.left)
        right = self.dfs(root.right)
        r = left[0] + right[0] + root.val
        nr = max(left[0], left[1]) + max(right[0], right[1])
        return [nr, r]
