5.23.2020 // Q 17 (Backtracking(DFS) + HashTable)

17. Letter Combinations of a Phone Number
class Solution(object):
    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """
        # Hashtable + backtracking
        if not digits:
            return []
        self.HashTable = {
            '2': ['a', 'b','c'],
            '3': ['d', 'e','f'],
            '4': ['g', 'h','i'],
            '5': ['j', 'k','l'],
            '6': ['m', 'n','o'],
            '7': ['p', 'q','r', 's'],
            '8': ['t', 'u','v'],
            '9': ['w', 'x','y', 'z']
        }
        res = []
        self.dfs(res, digits, "")
        return res
    
    def dfs(self, res, digits, curString):
        if not digits:
            res.append(curString)
            return
        for c in self.HashTable[digits[0]]:
            self.dfs(res, digits[1:], curString+c)
            
