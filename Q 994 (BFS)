5.16.20 // Q 994

--Create a tuple in Java:
q.offer(new int[]{i, j});

--IF ELSE in one line 
return (rotten == notempty) ? res - 1 : -1;


994. Rotting Oranges
class Solution {
    public int orangesRotting(int[][] grid) {
        if (grid == null || grid.length == 0) {
            return 0;
        }
        Queue<int[]> q = new LinkedList<>();
        int notempty = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 2) {
                    q.offer(new int[]{i, j});
                }
                if (grid[i][j] != 0) {
                    notempty++;
                }
            }
        }
        if (notempty == 0) {
            // no orange
            return 0;
        }
        
        int rotten = 0;
        int res = 0;
        while (q.size() != 0) {
            int s = q.size();
            for (int level = 0; level < s; level++) {
                int[] temp = q.poll();
                rotten++; // must poll a rotten orange out
                int i = temp[0], j = temp[1];
                if (i - 1 >= 0 && grid[i-1][j] == 1) {
                    grid[i-1][j] = 2;
                    q.offer(new int[]{i-1, j});
                }
                if (j - 1 >= 0 && grid[i][j-1] == 1) {
                    grid[i][j-1] = 2;
                    q.offer(new int[]{i, j-1});
                }
                if (i + 1 < grid.length && grid[i+1][j] == 1) {
                    grid[i+1][j] = 2;
                    q.offer(new int[]{i+1, j});
                }
                if (j + 1 < grid[0].length && grid[i][j+1] == 1) {
                    grid[i][j+1] = 2;
                    q.offer(new int[]{i, j+1});
                }
            }
            res++;
        }
        
        return (rotten == notempty) ? res - 1 : -1;
    }
}
