5.21.2020 // Q 206 (Iterative + recursive), 21, 23 (heapq)

- heapq.heappush(heap, (node.val, node))
- curNode = heapq.heappop(heap)[1]

heapq.heappush(heap, item)
Push the value item onto the heap, maintaining the heap invariant.

heapq.heappop(heap)
Pop and return the smallest item from the heap, maintaining the heap invariant. If the heap is empty, IndexError is raised. To access the smallest item without popping it, use heap[0].




206. Reverse Linked List
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        # recursive
        if not head:
            return head
        # cur = head
        return self.helper(None, head)
    
    def helper(self, prev, cur):
        if not cur:
            return prev
        else:
            temp = cur.next
            cur.next = prev
            # prev = cur
            # cur = temp
            return self.helper(cur, temp)
            
            
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        # iterative
        if not head:
            return head
        prev, cur = None, head
        while cur:
            temp = cur.next
            cur.next = prev
            prev = cur
            cur = temp
        return prev
       
       
21. Merge Two Sorted Lists
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        if not l1:
            return l2
        if not l2:
            return l1
        dummy = ListNode()
        cur = dummy
        while l1 and l2:
            if l1.val < l2.val:
                cur.next = ListNode(l1.val)
                l1 = l1.next
                cur = cur.next
            else:
                cur.next = ListNode(l2.val)
                l2 = l2.next
                cur = cur.next
        while l1:
            cur.next = ListNode(l1.val)
            cur = cur.next
            l1 = l1.next
        while l2:
            cur.next = ListNode(l2.val)
            cur = cur.next
            l2 = l2.next
        return dummy.next
        
        
23. Merge k Sorted Lists
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        # heapq.heappush(heap, item)
        # Push the value item onto the heap, 
        # maintaining the heap invariant.
        if not lists:
            return None
        heap = []
        for node in lists:
            if node:
                heapq.heappush(heap, (node.val, node))
        dummy = ListNode()
        prev = dummy
        while heap:
            curNode = heapq.heappop(heap)[1]
            prev.next = curNode
            prev = prev.next
            if curNode.next:
                heapq.heappush(heap, (curNode.next.val, curNode.next))
        return dummy.next
