5.18.2020 // Q 153 (Binary Search)
5.25.2020 // Q 34, 33
- running time O(log(n)), so not loop the whole array -- binary search running time
- rotated sorted array:
if nums[mid] >= nums[left], then left part is sorted
else, right part is sorted

153. Find Minimum in Rotated Sorted Array
class Solution(object):
    def findMin(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        # Binary Search
        if not nums or len(nums) == 0:
            return 0
        if len(nums) == 1 or nums[len(nums) - 1] > nums[0]:
            # only one element or already sorted
            return nums[0] 
        left = 0
        right = len(nums) - 1
        while left < right:
            middle = (left + right) / 2
            if middle > 0 and nums[middle] < nums[middle - 1]:
                return nums[middle]
            if middle + 1 < len(nums) and nums[middle] > nums[middle + 1]:
                return nums[middle + 1]
            if nums[middle] < nums[left]:
                # element "middle" will be compared in the next loop two if's above
                right = middle - 1
            else:
                left = middle + 1
        return -1
        
        
154. Find Minimum in Rotated Sorted Array II


34. Find First and Last Position of Element in Sorted Array
class Solution(object):
    def searchRange(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        # O(log(n)), so not loop the whole array
        # binary search running time
        
        if not nums:
            return [-1, -1]
        left, right = 0, len(nums) - 1
        # res = [left, right]
        
        while left <= right:
            mid = left + (right - left) / 2  # prevent overflow
            if nums[mid] == target:
                # find the possible position
                left = mid
                right = mid
                while left - 1 >= 0 and nums[left - 1] == target:
                    left -= 1 
                while right + 1 < len(nums) and nums[right + 1] == target:
                    right += 1
                return [left, right]
            elif nums[mid] > target:
                # target should be on the left
                right = mid - 1
            else:
                left = mid + 1  
            
        return [-1, -1]


33. Search in Rotated Sorted Array
class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        # binary search
        if not nums or len(nums) == 0:
            return -1
        
        left, right = 0, len(nums) - 1
        while left <= right:
            mid = left + (right - left) / 2
            if nums[mid] == target:
                # find the target
                return mid
            # elif nums[mid] > target:  
            # nums[mid] > target does not mean anything
            # we need to find whether the left part is sorted
            elif nums[left] <= nums[mid]:  # left part is sorted
                if nums[left] <= target <= nums[mid]:  
                    # we should use <= because nums[left] might be equal to target
                    # and we should put nums[left] into the list we will use instead of going into the else part
                    right = mid - 1
                else:
                    left = mid + 1
            else:  # right part is sorted
                if nums[mid] <= target <= nums[right]:
                    left = mid + 1
                else:
                    right = mid - 1
        return -1
