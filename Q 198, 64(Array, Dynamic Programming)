5.24.2020 // Q 198 (Array, Dynamic Programming)
5.25.2020 // Q 64, 62

'''
4 steps for DP problem:--------- 当前状态是与之前的状态有关的，或者是由之前的状态直接得到的！！！！！！
-------------------------------- Instead of getting the exact house getting robbed, the question only asks us the total money/ T&F => DP
1. Status variable: for each house, we have 2 choices: rob or not rob,
                    so, we define two status variable: two list:
                    if we rob the current house, the maximum money we can get: r[n]
                    if we do not rob the current house , the maximum money we can get: nr[n]
2. Init: r[0] = nums[0], nr[0] = 0
3. Transformation: r[i] = nr[i - 1] + nums[i], since if we want to rob this house, we cannot rob the previous house,
                   and the nr[i - 1] by definition, is the maximum money that we do no rob the previous house,
                   so, we just add them up.
                   nr[i] = max(r[i - 1], nr[i - 1]), as for nr[i], things are a little more tricky,
                   since we can choose to rob the previous house and  we can choose not to rob the previous house,
                   so, we just take their maximum, the larger one.
                   As for the r[i], it has no choices like this, since, if we choose to rob the current house,
                   there is no way for us to define robbing the previous house as a option, 
                   we have only one choice: not rob the previous house, which is nr[i - 1]
4. Return: return the larger value out of r[n] and nr[n]
'''

198. House Robber
class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums:
            return 0
        r, nr = [0]*len(nums), [0]*len(nums)
        r[0], nr[0] = nums[0], 0
        for i in range(1, len(nums)):
            r[i] = max(r[i - 1], nr[i - 1] + nums[i])
            nr[i] = max(r[i-1], nr[i-1])
        return max(r[-1], nr[-1])


64. Minimum Path Sum
Solution 1:
class Solution(object):
    def minPathSum(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        # dynamic programming
        if not grid or len(grid) == 0:
            return 0
        dp = [[0 for j in range(len(grid[0]))] for i in range(len(grid))]
        dp[0][0] = grid[0][0]
        for i in range(0, len(grid)):
            for j in range(0, len(grid[0])):
                # add left or add up
                if i == 0 and j == 0:
                    continue
                up = dp[i - 1][j] if i - 1 >= 0 else float('inf')
                left = dp[i][j - 1] if j - 1 >= 0 else float('inf')
                dp[i][j] = grid[i][j] + min(left, up)
        return dp[-1][-1]

Solution 2 (initialize in different way):
class Solution(object):
    def minPathSum(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        # dynamic programming
        if not grid or len(grid) == 0:
            return 0
        dp = [[0 for j in range(len(grid[0]))] for i in range(len(grid))]
        dp[0][0] = grid[0][0]
        
        # initialize first to avoid i - 1 < 0 or j - 1 < 0
        for x in range(1, len(grid)):
            dp[x][0] = dp[x - 1][0] + grid[x][0]
        for y in range(1, len(grid[0])):
            dp[0][y] = dp[0][y - 1] + grid[0][y]
            
        for i in range(1, len(grid)):
            for j in range(1, len(grid[0])):
                # add left or add up
                dp[i][j] = grid[i][j] + min(dp[i - 1][j], dp[i][j - 1])
        return dp[-1][-1]


62. Unique Paths
class Solution(object):
    def uniquePaths(self, m, n):
        """
        :type m: int
        :type n: int
        :rtype: int
        """
        if m == 0 and n == 0:
            return 0
        m, n = n, m  # as shown in pic, m * n grid is actually n * m
        dp = [[0 for j in range(n)] for i in range(m)]
        dp[0][0] = 1
        for x in range(1, m):
            dp[x][0] = 1
        for y in range(1, n):
            dp[0][y] = 1   # since only right or down direction, there is only one way to get these positions
           
        # for grid[i][j], there are two ways to get here: up or left, so we just add the dp from up and left
        for i in range(1, m):
            for j in range(1, n):
                dp[i][j] = dp[i-1][j] + dp[i][j-1]
        return dp[-1][-1]
