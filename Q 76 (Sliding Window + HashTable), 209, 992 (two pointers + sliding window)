5.23.2020 // Q 76 (Sliding Window + HashTable), 209, 992 (two pointers + sliding window)
-  collections.defaultdict(int): the default "value" is int = 0
- if collections.defaultdict(list): we can do append without initializing

- counter = collections.Counter()
it is a kind of dictionary with value to be integers

76. Minimum Window Substring
class Solution(object):
    def minWindow(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: str
        """
        # collections.defaultdict(int): the default "value" is int = 0
        # if collections.defaultdict(list): we can do append without initializing
        res, sdict, tdict = "", collections.defaultdict(int), collections.defaultdict(int)
        for char in t:
            tdict[char] += 1
        left = self.findNextIndex(0, s, t)
        if left == len(s):
            return ""  # not exist
        right = left
        countMatch = 0
        while right < len(s):
            curChar = s[right]
            if sdict[curChar] < tdict[curChar]: # one more match
                countMatch += 1
            sdict[curChar] += 1
            while left < len(s) and countMatch == len(t):
                # move left pointer to contract the length of res
                if len(res) == 0 or len(res) > right - left + 1:
                    # update res
                    res = s[left : right + 1]
                if sdict[s[left]] <= tdict[s[left]]:
                    countMatch -= 1
                sdict[s[left]] -= 1
                left = self.findNextIndex(left + 1, s, t)
            right = self.findNextIndex(right + 1, s, t)
        return res
        
    def findNextIndex(self, start, s, t):
        while start < len(s):
            if s[start] in t:
                return start
            else:
                start += 1
        return start


209. Minimum Size Subarray Sum
class Solution(object):
    def minSubArrayLen(self, s, nums):
        """
        :type s: int
        :type nums: List[int]
        :rtype: int
        """
        # two pointers
        res, left, right, curSum = 0, 0, 0, 0
        while right < len(nums):
            cur = nums[right]
            curSum += cur
            while left < len(nums) and curSum >= s:
                # move left pointer
                if res == 0 or right - left + 1 < res:
                    res = right - left + 1
                curSum -= nums[left]
                left += 1
            # move right pointer
            right += 1
        return res


992. Subarrays with K Different Integers
class Solution(object):
    def subarraysWithKDistinct(self, A, K):
        """
        :type A: List[int]
        :type K: int
        :rtype: int
        """
        # 340. Longest Substring with At Most K Distinct Characters 
        # (Sliding Window + Counter) 20.5.23 Hard
        # atMost(A, K) - atMost(A, K-1)
        
        return self.atMost(A, K) - self.atMost(A, K - 1)
    
    def atMost(self, A, K):
        counter = collections.Counter()
        # for num in A:
        #     counter[num] += 1
        res, start = 0, 0
        
        for j in range(len(A)):
            cur = A[j]
            if cur not in counter or counter[cur] == 0:
                # one more unique number
                K -= 1
            counter[cur] += 1
            while K < 0:
                # move start pointer
                counter[A[start]] -= 1
                if counter[A[start]] == 0:
                    K += 1
                start += 1
            res += j - start + 1
            # at eaach loop, we introduct a new number into the subarrays
            # and these new subarrayas all end at j
            # so the total number of new subarrays will be j - start + 1
            
        return res
    
