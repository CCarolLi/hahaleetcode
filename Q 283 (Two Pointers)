5.24.2020 // Q 283 (Two Pointers)


O(n)
283. Move Zeroes
class Solution(object):
    def moveZeroes(self, nums):
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """
        left = self.findNextZero(0, nums)
        if left == -1:
            return
        right = left
        while right < len(nums):
            right = self.findNextNonZero(right, nums)
            if right == len(nums):
                return
            nums[left], nums[right] = nums[right], nums[left]
            left += 1
        return
        
    def findNextZero(self,start, nums):
        for i in range(start, len(nums)):
            if nums[i] == 0:
                return i
        return len(nums)
    def findNextNonZero(self,start, nums):
        for i in range(start, len(nums)):
            if nums[i] != 0:
                return i
        return len(nums)


class Solution(object):
    def moveZeroes(self, nums):
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """
        # two pointers
        slow, fast = 0, 0
        while fast < len(nums):
            if slow == fast and nums[fast] != 0:
                # move current index into the sorted part
                # slow will stop only if nums[slow] == 0
                slow += 1
                fast += 1
            elif nums[fast] == 0:
                # fast should point to the next nonzero index
                fast += 1
            elif nums[fast] != 0:  # or else:
                # fast is nonzero
                # slow is at the previous index, which means it points to the zero index
                # do swap
                nums[slow], nums[fast] = nums[fast], nums[slow]
                slow += 1
                fast += 1
