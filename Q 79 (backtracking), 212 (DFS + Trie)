5.17.20 Q 79 (backtracking), 212 (DFS + Trie)
- move in different directions in board: 
self.dirs = [[-1, 0], [0, -1], [0, 1], [1, 0]]
for dirct in self.dirs:
  if self.backtracking(board, word[1:], i + dirct[0], j + dirct[1]):
- Trie
The children of a TrieNode is a hashmap
- collections.defaultdict
Create the key if the key accessed does not exist in the dict
- Use board[i][j] = '#' to save extra space for visited and change it back after backtracking

79. Word Search
class Solution(object):
    def exist(self, board, word):
        """
        :type board: List[List[str]]
        :type word: str
        :rtype: bool
        """
        # DFS, backtracking, recursion stack
        # cannot be used more than once - visited
        self.visited = [[False for j in range(len(board[0]))] for i in range(len(board))]
        self.dirs = [[-1, 0], [0, -1], [0, 1], [1, 0]]
        
        if not board or len(board) == 0:
            return false
        for i in range(len(board)):
            for j in range(len(board[0])):
                # try to start with every element in the board
                if self.backtracking(board, word, i, j):
                    return True
        return False
    def backtracking(self, board, word, i, j):
        if len(word) == 0:
            return True
        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[0] or self.visited[i][j] == True:
            # out of bound or start char not correct or already visited element
            return False
        self.visited[i][j] = True
        for dirct in self.dirs:
            if self.backtracking(board, word[1:], i + dirct[0], j + dirct[1]):
                return True
        self.visited[i][j] = False
        # unvisit the element after current backtracking
        return False
        

212. Word Search II
class TrieNode(object):
    def __init__(self):
        self.children = collections.defaultdict(TrieNode)
        self.isEnd = False

class Trie(object):
    def __init__(self):
        self.root = TrieNode()
    
    def insert(self, word):
        r = self.root
        for c in word:
            r = r.children[c]
        r.isEnd = True
    
class Solution(object):
    def findWords(self, board, words):
        """
        :type board: List[List[str]]
        :type words: List[str]
        :rtype: List[str]
        """
        # collections.defaultdict
        # Usually, a Python dictionary throws a KeyError if you try to get an item with 
        # a key that is not currently in the dictionary. 
        # The defaultdict in contrast will simply create any items that you try to 
        # access (provided of course they do not exist yet).
        if not board or len(board) == 0:
            return []
        
        trie = Trie()
        # add words into the Trie
        for word in words:
            trie.insert(word)
        node = trie.root
        self.res = []
        # self.dirs = [[0, -1], [1, 0], [-1, 0], [0, 1]]
        self.dirs = [[1, 0], [0, 1], [0, -1], [-1, 0]]
        
        for i in range(len(board)):
            for j in range(len(board[0])):
                self.backtracking(board, node, "", i, j);
        return self.res
    
    
    def backtracking(self, board, node, curWord, i, j):
        if node.isEnd == True:
            self.res.append(curWord)
            node.isEnd = False
            return
        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or not board[i][j] in node.children:
            return
        temp = board[i][j]
        board[i][j] = '#'
        for dir in self.dirs:
            self.backtracking(board, node.children[temp], curWord+temp, i+dir[0], j+dir[1])
        board[i][j] = temp
        return
