5.26.2020 // Q 647, 5, 516 (Expand Around Center, Dynamic Programming)


647. Palindromic Substrings
O(n^2) T, O(1) S
class Solution(object):
    def countSubstrings(self, s):
        """
        :type s: str
        :rtype: int
        """
        # https://leetcode.com/problems/palindromic-substrings/discuss/105688/Very-Simple-Java-Solution-with-Detail-Explanation
        # extendPalindrome
        if not s or len(s) == 0:
            return 0
        self.count = 0
        for i in range(len(s)):
            self.checkpanlind(s, i, i)  # odd length panlindrom
            self.checkpanlind(s, i, i + 1)  # even length panlindrom
        return self.count
    
    def checkpanlind(self, s, left, right):
        while left >= 0 and right < len(s) and s[left] == s[right]:
            self.count += 1
            left -= 1
            right += 1
            

5. Longest Palindromic Substring
Solution 1 (with global variable):
class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        if not s or len(s) == 0:
            return ""
        
        self.res = ""
        for i in range(len(s)):
            self.check(s, i, i)
            self.check(s, i, i+1)
        return self.res
    
    def check(self, s, l, r):
        while l >= 0 and r < len(s) and s[l] == s[r]:
            temp = s[l : r + 1]
            if len(temp) > len(self.res):
                self.res = temp[:]
            l -= 1
            r += 1
            
Solution 2 (without global variable):
class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        if not s or len(s) == 0:
            return ""
        
        start, end = 0, 0
        
        # self.res = ""
        for i in range(len(s)):
            len1 = self.check(s, i, i)
            len2 = self.check(s, i, i+1)
            if len1 > len2 and len1 > end - start + 1:
                start, end = i - len1 / 2, i + len1 / 2
            if len2 > len1 and len2 > end - start + 1:
                start, end = i - (len2 - 1) / 2, i + len2 / 2
        return s[start : end + 1]
    
    def check(self, s, l, r):
        while l >= 0 and r < len(s) and s[l] == s[r]:
            l -= 1
            r += 1
        return (r - 1) - (l + 1) + 1
     
     
516. Longest Palindromic Subsequence
class Solution(object):
    def longestPalindromeSubseq(self, s):
        """
        :type s: str
        :rtype: int
        """
        # dynamic programming
        dp = [[0 for j in range(len(s))] for i in range(len(s))]
        
        for length in range(1, len(s) + 1):  # for each length
            for start in range(0, len(s) - length + 1):  # for each start point
                end = start + length - 1
                # dp[start][start] = 1
                if (start == end):
                    dp[start][end] = 1
                    continue
                if s[start] == s[end]:
                    dp[start][end] = dp[start + 1][end - 1] + 2
                else:
                    dp[start][end] = max(dp[start][end - 1], dp[start + 1][end])
        return dp[0][len(s) - 1]
        
