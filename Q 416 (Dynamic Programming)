5.28.2020 // Q 416 (Dynamic Programming)


Solution 1: 2-D space
416. Partition Equal Subset Sum
class Solution(object):
    def canPartition(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        # this question is the same as that we want to 
        # get the subarray that sum up to Sum(nums) / 2
        
        Sum = sum(nums)
        print(Sum)
        if Sum % 2 != 0:
            # odd number
            return False
        halfsum = Sum / 2
        
        # dp[i][j] means that we add first i numbers up to sum of j
        dp = [[False for j in range(halfsum + 1)] for i in range(len(nums) + 1)]
        dp[0][0] = True  # add 0 elements to get 0
        
        for i in range(1, len(dp)):
            dp[i][0] = True  # sum to 0 is true 
        
        for i in range(1, len(dp)):
            for j in range(1, len(dp[0])):
                if j - nums[i - 1] >= 0:
                    dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]  # not take it or take it
                else:
                    dp[i][j] = dp[i - 1][j]
        # print(dp)
        return dp[-1][-1]
                
                
Solution 2: 1-D space
class Solution(object):
    def canPartition(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        # this question is the same as that we want to 
        # get the subarray that sum up to Sum(nums) / 2
        
        Sum = sum(nums)
        if Sum % 2 != 0:
            # odd number
            return False
        halfsum = Sum / 2
        
        # dp[i][j] means that we add first i numbers up to sum of j
        dp = [False for j in range(halfsum + 1)]
        dp[0] = True  # add 0 elements to get 0
        
        for num in nums:  # the same as loop from i = 0 to the total number of elements
            for j in range(halfsum, -1, -1):
                if j - num >= 0:
                    dp[j] = dp[j] or dp[j - num]
            
        return dp[-1]
