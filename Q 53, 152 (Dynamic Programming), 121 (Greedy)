5.24.2020 // Q 53, 121 (Greedy)
5.25.2020 // Q 152  (Dynamic Programming, similar to 53 but more complicated)
- python can use max(i1, i2, i3)

53. Maximum Subarray
class Solution(object):
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums:
            return 0
        if max(nums) <= 0:
            return max(nums)
        
        res, curSum = 0, 0
        # greedy
        for num in nums:
            if curSum + num <= 0:
                # do not take it and swip out all the previous numbers
                # because this num will have negative effect on the curSum
                curSum = 0
            else:
                curSum += num
                res = max(res, curSum)
        return res
        
        
152. Maximum Product Subarray
class Solution(object):
    def maxProduct(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        # dynamic programming - current state is related to previous states
        
        if not nums:
            return 0
        
        # minp to deal with the negative times negative becomes positive
        minp, maxp, res = nums[0], nums[0], nums[0]
        for i in range(1, len(nums)):
            # must be one line because we change the value of minp and it affects the value of maxp
            minp, maxp = min(nums[i], nums[i] * maxp, nums[i] * minp), max(nums[i], nums[i] * maxp, nums[i] * minp)
            res = max(res, maxp)  # res might be from very first, so we cannot just return max(maxp, minp)
        return res


121. Best Time to Buy and Sell Stock
class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        if not prices:
            return 0
        res, curMin = 0, float('inf')
        for price in prices:
            curMin = min(curMin, price)  # when prices[0], curMin will become prices[0]
            # price - curMin will be the max profit selling at current date
            # keep updating the max profit
            res = max(res, price - curMin)
        return res
