5.18.20 // Q 75, 88 (Two Pointers)
- copy first n elements from nums2 to nums1:
nums1[:n] = nums2[:n]


75. Sort Colors
class Solution(object):
    def sortColors(self, nums):
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """
        # Two Pointers - 3 pointers actually
        first, last = 0, len(nums) - 1
        # initialize first and last to exclude sorted part
        while first < len(nums) and nums[first] == 0:
            first += 1
        while last >= 0 and nums[last] == 2:
            last -= 1
        cur = first
        while cur <= last:
            # case [2,0,1] requires cur == last
            if nums[cur] == 0:
                # swap with first to move 0 to the sorted part
                nums[first], nums[cur] = nums[cur], nums[first]
                first += 1
                cur += 1
            elif nums[cur] == 1:
                # 1 should be after first pointer and do not change first pointer
                cur += 1
            elif nums[cur] == 2:
                # swap with last
                # move 2 to the sorted part
                nums[cur], nums[last] = nums[last], nums[cur]
                last -= 1


88. Merge Sorted Array
class Solution(object):
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: None Do not return anything, modify nums1 in-place instead.
        """
        # two pointers
        # start from larger elements
        while m > 0 and n > 0:
            if nums1[m - 1] < nums2[n - 1]:
                nums1[m - 1 + n] = nums2[n - 1]
                n -= 1
            else:
                nums1[m - 1 + n], nums1[m - 1] = nums1[m - 1], nums1[m - 1 + n]
                m -= 1
        if m == 0 and n > 0:
            # special case where all the numbers in nums2 is larger than nums1
            nums1[:n] = nums2[:n]
