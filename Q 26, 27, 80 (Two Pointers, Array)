5.29.2020 // Q 26, 27, 80 (Two Pointers, Array)


26. Remove Duplicates from Sorted Array
class Solution(object):
    def removeDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums or len(nums) == 0:
            return 0
        left, right = 1, 1
        # left marks the position to insert
        # right used to loop every element
        while right < len(nums):
            if nums[right] == nums[left - 1]:
                # duplicates, we skip
                right += 1
            else:
                # unique value
                nums[left] = nums[right]  # we throw the original value since it's not useful anymore
                left += 1  # move to the new to-be-inserted position
                right += 1  # next loop element
        return left


27. Remove Element
class Solution(object):
    def removeElement(self, nums, val):
        """
        :type nums: List[int]
        :type val: int
        :rtype: int
        """
        if not nums or len(nums) == 0:
            return 0
        left, right = 0, len(nums) - 1
        while left <= right:
            if nums[left] == val:
                # swap
                nums[left], nums[right] = nums[right], nums[left]
                right -= 1
            else:
                left += 1
        return left


80. Remove Duplicates from Sorted Array II
class Solution(object):
    def removeDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums or len(nums) == 0:
            return 0
        left, right = 2, 2
        # left marks the position to insert
        # right used to loop every element
        while right < len(nums):
            if nums[right] == nums[left - 1] == nums[left - 2]:
                right += 1
            else:
                # not three duplicates in a row
                nums[left] = nums[right]  # we throw the original value since it's not useful anymore
                left += 1  # move to the new to-be-inserted position
                right += 1  # next loop element
        return left
